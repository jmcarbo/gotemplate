name: Template Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test-template:
    name: Test Template Functionality
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Mark as experimental due to known issues
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            install_cmd: |
              sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
              sudo chmod +x /usr/local/bin/yq
          - os: macos-latest
            install_cmd: |
              brew install yq

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure git
        run: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"

      - name: Install dependencies
        run: |
          ${{ matrix.install_cmd }}
          go install github.com/caarlos0/svu@latest

      - name: Run Template Instantiation Tests
        run: |
          ./test/template/test_instantiation.sh

      - name: Run Template Sync Tests
        run: |
          ./test/template/test_sync.sh

      - name: Run Build and Development Tests
        run: |
          ./test/template/test_build_dev.sh

      - name: Run Version Management Tests
        run: |
          ./test/template/test_version.sh

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}
          path: /tmp/gotemplate-tests-*

  test-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          docker build -t test-template:latest .

      - name: Test Docker image
        run: |
          docker run --rm test-template:latest /bin/sh -c "echo 'Docker image works'"

  test-all:
    name: Run All Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # Mark as experimental due to known issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure git
        run: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"

      - name: Install all dependencies
        run: |
          # Install yq
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Install go tools
          go install github.com/caarlos0/svu@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
          
          # Install Python tools
          pip install --user commitizen

      - name: Run all tests with verbose output
        run: |
          ./test/template/run_all_tests.sh --verbose

  test-instantiation-matrix:
    name: Test Project Instantiation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - { name: "simple-api", module: "github.com/test/simple-api" }
          - { name: "complex-service", module: "github.com/test/complex-service" }
          - { name: "my-awesome-app", module: "github.com/test/my-awesome-app" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure git
        run: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"

      - name: Test instantiation of ${{ matrix.project.name }}
        run: |
          # Create temporary directory
          TEMP_DIR=$(mktemp -d)
          cp -r . "$TEMP_DIR/template"
          cd "$TEMP_DIR/template"
          
          # Run setup
          make setup-project PROJECT_NAME=${{ matrix.project.name }} MODULE_PATH=${{ matrix.project.module }}
          
          # Verify setup
          grep -q "module ${{ matrix.project.module }}" go.mod
          grep -q "BINARY_NAME=${{ matrix.project.name }}" Makefile
          
          # Try to build
          go mod tidy
          make build

      - name: Cleanup
        if: always()
        run: rm -rf "$TEMP_DIR"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-template, test-docker, test-all, test-instantiation-matrix]
    if: always()
    steps:
      - name: Check test results
        run: |
          # Check critical tests (instantiation matrix and docker)
          if [[ "${{ needs.test-instantiation-matrix.result }}" != "success" ]] || 
             [[ "${{ needs.test-docker.result }}" != "success" ]]; then
            echo "❌ Critical tests failed:"
            echo "Instantiation tests: ${{ needs.test-instantiation-matrix.result }}"
            echo "Docker tests: ${{ needs.test-docker.result }}"
            exit 1
          fi
          
          # Report all results (template tests are experimental)
          echo "Test Results:"
          echo "✅ Instantiation tests: ${{ needs.test-instantiation-matrix.result }}"
          echo "✅ Docker tests: ${{ needs.test-docker.result }}"
          echo "⚠️  Template tests (experimental): ${{ needs.test-template.result }}"
          echo "⚠️  All tests (experimental): ${{ needs.test-all.result }}"
          echo ""
          echo "✅ Critical tests passed! Template is functional."
          echo "See test/template/KNOWN_ISSUES.md for information about experimental tests."